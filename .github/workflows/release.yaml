name: "Release"
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch: {}

jobs:
  validate:
    uses: ./.github/workflows/validate.yaml

  package:
    needs: validate
    name: "Package dataset"
    runs-on: "ubuntu-latest"
    container: ghcr.io/riverbench/ci-worker:main
    # Force only one package job to execute at a time, to avoid duplicating work.
    concurrency: package-dataset
    outputs:
      package-key: ${{ steps.cache-dataset-restore.outputs.cache-primary-key }}

    steps:
      - name: "Checkout dataset repository"
        uses: actions/checkout@v3
        with:
          path: dataset

      - name: "Fetch source release info"
        run: |
          wget -O release.json "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/source"

      - name: Check if the packaged dataset is cached
        id: cache-dataset-restore
        uses: actions/cache/restore@v3
        with:
          lookup-only: true
          path: package_out
          key: cache-package-${{ hashFiles('/app/ci-worker-assembly.jar', 'dataset/metadata.ttl', 'release.json') }}

      - name: "Package the dataset"
        if: steps.cache-dataset-restore.outputs.cache-hit != 'true'
        run: |
          mkdir package_out
          ci-worker package dataset release.json package_out

      - name: Save the packaged dataset in cache
        id: cache-dataset-save
        uses: actions/cache/save@v3
        if: steps.cache-dataset-restore.outputs.cache-hit != 'true'
        with:
          path: package_out
          key: ${{ steps.cache-dataset-restore.outputs.cache-primary-key }}

  pre-release:
    needs: package
    if: github.ref == 'refs/heads/main'
    name: "Make a pre-release"
    runs-on: "ubuntu-latest"
    container: ghcr.io/riverbench/ci-worker:main
    permissions: write-all
    steps:
      - name: Restore packaged dataset from cache
        id: cache-dataset-restore
        uses: actions/cache/restore@v3
        with:
          path: package_out
          key: ${{ needs.package.outputs.package-key }}

      - name: "Checkout dataset repository"
        uses: actions/checkout@v3
        with:
          path: dataset

      - name: Merge metadata and packages
        run: |
          mkdir release
          ci-worker merge-metadata dataset package_out release dev
          mv package_out/*.gz release

      - name: Fetch the schema repository
        uses: actions/checkout@v3
        with:
          repository: 'RiverBench/schema'
          path: schema

      - name: Generate documentation
        run: |
          mkdir doc_out
          ci-worker dataset-doc-gen release/metadata.ttl dataset schema doc_out
          tar -czf release/docs.tar.gz -C doc_out/docs .

      - name: Upload README.md artifact
        uses: actions/upload-artifact@v3
        with:
          name: readme
          path: doc_out/README.md

      - name: Upload files for the release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          prerelease: true
          draft: false
          makeLatest: false
          tag: "dev"
          name: "Development pre-release"
          artifacts: 'release/*'
          removeArtifacts: true
          generateReleaseNotes: true

  trigger-doc-update-dev:
    needs: pre-release
    name: "Trigger documentation update (dev)"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Trigger repository_dispatch"
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT_DOC_REPO_HOOKS }}
          repository: RiverBench/riverbench.github.io
          event-type: dataset-doc-update
          client-payload: '{ "repo": "${{ github.repository }}", "tag": "dev" }'

  update-readme:
    needs: pre-release
    name: "Update README.md"
    runs-on: "ubuntu-latest"
    permissions: write-all
    steps:
      - name: "Checkout dataset repository"
        uses: actions/checkout@v3

      - name: Restore README.md
        uses: actions/download-artifact@v3
        with:
          name: readme

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Automatic update of README.md'
          default_author: github_actions
          add: 'README.md'
          push: true

  trigger-dataset-update:
    needs: update-readme
    name: "Trigger dataset update in the main repository"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Trigger repository_dispatch"
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT_MAIN_REPO_HOOKS }}
          repository: RiverBench/RiverBench
          event-type: dataset-update
          client-payload: '{"repo": "${{ github.repository }}" }'

  tagged-release:
    needs: package
    if: startsWith(github.ref, 'refs/tags/v')
    name: "Make a tagged release"
    runs-on: "ubuntu-latest"
    container: ghcr.io/riverbench/ci-worker:main
    permissions: write-all
    steps:
      - name: Restore packaged dataset from cache
        id: cache-dataset-restore
        uses: actions/cache/restore@v3
        with:
          path: package_out
          key: ${{ needs.package.outputs.package-key }}

      - name: "Checkout dataset repository"
        uses: actions/checkout@v3
        with:
          path: dataset

      - name: Merge metadata and packages
        run: |
          mkdir release
          ci-worker merge-metadata dataset package_out release "${GITHUB_REF_NAME#v}"
          mv package_out/*.gz release

      - name: Fetch the schema repository
        uses: actions/checkout@v3
        with:
          repository: 'RiverBench/schema'
          path: schema

      - name: Generate documentation
        run: |
          mkdir doc_out
          ci-worker dataset-doc-gen release/metadata.ttl dataset schema doc_out
          tar -czf release/docs.tar.gz -C doc_out/docs .

      - name: Upload files for the release
        uses: ncipollo/release-action@v1.12.0
        with:
          prerelease: false
          draft: false
          makeLatest: true
          tag: "${{ env.GITHUB_REF_NAME }}"
          name: "${{ env.GITHUB_REF_NAME }}"
          artifacts: 'release/*'
          generateReleaseNotes: true

  trigger-doc-update-tagged:
    needs: tagged-release
    name: "Trigger documentation update (tagged rel)"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Trigger repository_dispatch"
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT_DOC_REPO_HOOKS }}
          repository: RiverBench/riverbench.github.io
          event-type: dataset-doc-update
          client-payload: '{ "repo": "${{ github.repository }}", "tag": "${{ github.ref_name }}" }'
